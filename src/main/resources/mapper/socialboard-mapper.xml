<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="SocialBoard">
	<!--최신  -->
	<select id="showSocialBoardList" resultType="sdto">
		 select su.*,nvl(sg.count, '0') good_count,nvl(sc.comcount, '0') comment_count from (select s.*, u.name writerName,u.photo user_photo, u.state userState, row_number() over (order by social_date desc) recent from social s, users u where s.social_writer = u.seq) su
left outer join (select social_seq,count(*) count from social_good group by social_seq) sg on su.social_seq = sg.social_seq
left outer join (select social_seq,count(*) comcount from social_comment group by social_seq) sc on su.social_seq = sc.social_seq 
where recent between #{start} and #{end}
		<if test="age gt 0">
			<!-- 연령순 -->
			and su.age=#{age}
		</if>
		<if test="gender !=null and gender !='g'.toString() ">
			<!--성별  -->
			and su.gender = #{gender}
		</if>		
		 order by social_date desc
	</select>
	
	<select id="showSocialHotBoardList" resultType="sdto">
		 select su.*,nvl(sg.count, '0') good_count,nvl(sc.comcount, '0') comment_count
from (select s.*, u.name writerName,u.photo user_photo, u.state userState  from social s, users u where s.social_writer = u.seq) su
left outer join (select social_seq,count(*) count  from social_good group by social_seq order by count desc) sg on su.social_seq = sg.social_seq
left outer join (select social_seq,count(*) comcount from social_comment group by social_seq) sc on su.social_seq = sc.social_seq 
where rownum between #{start} and #{end}
		<trim prefix="where" prefixOverrides="and">
			<if test="age gt 0">
			 	and su.AGE= #{age}
			</if>
			<if test="gender !=null and gender !='g'.toString()">
				and su.GENDER=#{gender}
			</if> 
			</trim>
		ORDER by good_count desc
	</select>
	
	<select id="showSocialFollowBoardList" resultType="sdto">
select su.*,nvl(sg.count, '0') good_count, nvl(sc.comcount, '0') comment_count, writerName, user_photo, userState
from (select s.*, u.name writerName,u.photo user_photo, u.state userState, row_number() over (order by social_date desc) recent from social s, users u where s.social_writer = u.seq) su 
left outer join (select social_seq,count(*) count from social_good group by social_seq) sg on su.social_seq = sg.social_seq
left outer join (select social_seq,count(*) comcount from social_comment group by social_seq) sc on su.social_seq = sc.social_seq 
where su.social_writer in (select following_seq from follow where USER_SEQ = #{user_seq}) and recent between #{start} and #{end}
		<if test="age gt 0">
			and su.AGE=#{age}
		</if>
		<if test="gender !=null and gender !='g'.toString()">
			and su.GENDER=#{gender}
		</if>
		order by su.social_date desc
	</select>
	
		<!--최신  -->
	<select id="showHashTagBoardList" resultType="sdto" parameterType="map">
		select s.*, u.name writerName,u.photo user_photo, u.state userState from social s, users u, social_hash_tag sht where s.social_writer = u.seq and s.social_seq = sht.social_seq	and sht.social_hash_tag_contents = #{search}	
		<if test="pAge gt 0">
			<!-- 연령순 -->
			and s.age=#{pAge}
		</if>
		<if test="pGender !=null and pGender !='g'.toString() ">
			<!--성별  -->
			and s.gender = #{pGender}
		</if>		
		order by social_date desc
	</select>
	
	<select id="showHashTagHotBoardList" resultType="sdto" parameterType="map">
		select s.*,sg.count count from social s,(select social_seq,count(*) count from social_good GROUP by social_seq)sg, social_hash_tag sht where s.SOCIAL_SEQ = sg.social_seq and sht.social_hash_tag_contents=#{search} and s.social_seq = sht.social_seq
			<if test="pAge gt 0">
			 	and s.AGE= #{pAge}
			</if>
			<if test="pGender !=null and pGender !='g'.toString()">
				and s.GENDER=#{pGender}
			</if> 
		ORDER by count desc
	</select>
	
	<select id="showHashTagFollowBoardList" resultType="sdto" parameterType="map">
	select s.*from(select following_seq from follow where USER_SEQ =#{user_seq})f,SOCIAL s, social_hash_tag sht where f.following_seq = s.SOCIAL_WRITER and sht.social_hash_tag_contents=#{search} and s.social_seq = sht.social_seq
		<if test="pAge gt 0">
			and s.AGE=#{pAge}
		</if>
		<if test="pGender !=null and pGender !='g'.toString()">
			and s.GENDER=#{pGender}
		</if>
		order by s.social_date desc
	</select>
	
	<insert id="insertSocialBoard" parameterType="sdto">
		insert into social values(social_seq.nextval, #{social_title}, #{social_contents}, #{social_writer}, sysdate, #{photo},#{gender},#{age})
	</insert>
	
	<select id="selectSocialBoard" parameterType="int" resultType="sdto">
		select s.*, nvl(sc.count,'0') comment_count from social s, (select social_seq, count(*) count from social_comment group by social_seq) sc where s.social_seq = sc.social_seq(+) and s.social_seq = #{0}
	</select>
	
	<update id="updateSocialBoard" parameterType="sdto">
		update social set social_title = #{social_title}, social_contents = #{social_contents}, gender = #{gender}, age = #{age} where social_seq = #{social_seq}	
	</update>
	
	<select id="deleteSocialBoard" parameterType="int">
	 	delete from social where social_seq=#{0}
	</select>
	
	<select id="selectSocialWriter" parameterType="int" resultType="java.lang.Integer">
		select social_writer from social where social_seq = #{0}
	</select>
	
	<select id="getMySocialList" parameterType ="dto" resultType="sdto">
		select s.*, u.name writerName, u.photo user_photo, u.state userState, nvl(sc.comcount,'0') comment_count from social s, users u, (select social_seq, count(*) comcount from social_comment group by social_seq)sc where s.social_writer = u.seq and s.social_seq = sc.social_seq(+) and s.social_writer=#{seq} order by social_date desc
	</select>
	
	<select id="getSocialBoardcurrval" resultType="int">
		select social_seq.currval from dual
	</select>
	
	<select id="getCollectionSocialList" resultType="sdto">
		select c.collection_seq, s.social_seq, s.social_title, s.social_contents, s.social_writer, to_char(s.social_date, 'YYYY/MM/DD') social_date,  s.photo, s.gender, s.age, u.name writerName from collection_content c, social s, users u where c.social_seq = s.social_seq and s.social_writer=u.seq and c.collection_seq = #{collection_seq}
	</select>
	
	<!--좋아요 select insert delete -->
	<select id="selectGoodCount" resultType="int" >
		select count(*) from social_good where user_seq=#{user_seq} and social_seq=#{social_seq}
	</select>
	<insert id="insertGoodCount" >
		insert into social_good values(social_good_seq.nextval,#{social_seq},#{user_seq})
	</insert>
	<delete id="deleteGoodCount" >
		delete from social_good where user_seq=#{user_seq} and social_seq=#{social_seq}
	</delete>
	<select id="allGoodCount" resultType="int" >
		select count(*) from social_good where social_seq =#{social_seq}
	</select>
	<select id="getMyGoodSocialList" resultType="sdto">
		select social_seq from social_good where user_seq = #{seq}
	</select>
	<select id="getMyGoodSocialArticleList" resultType="sdto">
		select s.*, u.photo user_photo, u.state userState, u.name writerName, nvl(sc.comcount,'0') comment_count, nvl(sg.goodcount,'0') good_count from social s, users u, (select social_seq, count(*) comcount from social_comment group by social_seq)sc, (select social_seq, count(*) goodcount from social_good group by social_seq)sg where s.social_writer = u.seq and s.social_seq = sc.social_seq(+) and s.social_seq = sg.social_seq(+) and s.social_seq in (select social_seq from social_good where user_seq=#{seq}) order by 5 asc
	</select>
	
	<select id="searchedTagSocialList" resultType="sdto" parameterType="String">
		select s.*, u.name writerName,u.photo user_photo, u.state userState from social s, users u, social_hash_tag sht where s.social_writer = u.seq and s.social_seq = sht.social_seq	and sht.social_hash_tag_contents like '%'||#{0}||'%'
	</select>
	
	<select id="searchedBrandList" resultType="sdto" parameterType="String">
		select  s.*, u.name writerName, u.photo user_photo, u.state userState from social s,users u where s.social_seq IN (select social_seq from social_tag where tag_brand like '%'||#{0}||'%' or tag_store like '%'||#{0}||'%') and s.social_writer = u.seq
	</select>
</mapper>